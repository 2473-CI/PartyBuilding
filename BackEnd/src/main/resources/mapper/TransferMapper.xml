<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ru.springboot3.mapper.TransferMapper">
  <resultMap id="BaseResultMap" type="com.ru.springboot3.model.Transfer">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="fromBelongTo" jdbcType="VARCHAR" property="frombelongto" />
    <result column="toBelongTo" jdbcType="VARCHAR" property="tobelongto" />
    <result column="userId" jdbcType="INTEGER" property="userid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="initiator" jdbcType="VARCHAR" property="initiator" />
    <result column="recipient" jdbcType="VARCHAR" property="recipient" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="createTime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="updateTime" jdbcType="TIMESTAMP" property="updatetime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, fromBelongTo, toBelongTo, userId, `name`, initiator, recipient, `status`, createTime, 
    updateTime
  </sql>
  <select id="selectByExample" parameterType="com.ru.springboot3.model.TransferExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from transfer
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from transfer
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ru.springboot3.model.TransferExample">
    delete from transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ru.springboot3.model.Transfer">
    insert into transfer (id, fromBelongTo, toBelongTo, 
      userId, `name`, initiator, 
      recipient, `status`, createTime, 
      updateTime)
    values (#{id,jdbcType=INTEGER}, #{frombelongto,jdbcType=VARCHAR}, #{tobelongto,jdbcType=VARCHAR}, 
      #{userid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{initiator,jdbcType=VARCHAR}, 
      #{recipient,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, 
      #{updatetime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ru.springboot3.model.Transfer">
    insert into transfer
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="frombelongto != null">
        fromBelongTo,
      </if>
      <if test="tobelongto != null">
        toBelongTo,
      </if>
      <if test="userid != null">
        userId,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="initiator != null">
        initiator,
      </if>
      <if test="recipient != null">
        recipient,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="createtime != null">
        createTime,
      </if>
      <if test="updatetime != null">
        updateTime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="frombelongto != null">
        #{frombelongto,jdbcType=VARCHAR},
      </if>
      <if test="tobelongto != null">
        #{tobelongto,jdbcType=VARCHAR},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="initiator != null">
        #{initiator,jdbcType=VARCHAR},
      </if>
      <if test="recipient != null">
        #{recipient,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ru.springboot3.model.TransferExample" resultType="java.lang.Long">
    select count(*) from transfer
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update transfer
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.frombelongto != null">
        fromBelongTo = #{record.frombelongto,jdbcType=VARCHAR},
      </if>
      <if test="record.tobelongto != null">
        toBelongTo = #{record.tobelongto,jdbcType=VARCHAR},
      </if>
      <if test="record.userid != null">
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.initiator != null">
        initiator = #{record.initiator,jdbcType=VARCHAR},
      </if>
      <if test="record.recipient != null">
        recipient = #{record.recipient,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        `status` = #{record.status,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null">
        createTime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatetime != null">
        updateTime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update transfer
    set id = #{record.id,jdbcType=INTEGER},
      fromBelongTo = #{record.frombelongto,jdbcType=VARCHAR},
      toBelongTo = #{record.tobelongto,jdbcType=VARCHAR},
      userId = #{record.userid,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      initiator = #{record.initiator,jdbcType=VARCHAR},
      recipient = #{record.recipient,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=VARCHAR},
      createTime = #{record.createtime,jdbcType=TIMESTAMP},
      updateTime = #{record.updatetime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ru.springboot3.model.Transfer">
    update transfer
    <set>
      <if test="frombelongto != null">
        fromBelongTo = #{frombelongto,jdbcType=VARCHAR},
      </if>
      <if test="tobelongto != null">
        toBelongTo = #{tobelongto,jdbcType=VARCHAR},
      </if>
      <if test="userid != null">
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="initiator != null">
        initiator = #{initiator,jdbcType=VARCHAR},
      </if>
      <if test="recipient != null">
        recipient = #{recipient,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null">
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null">
        updateTime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ru.springboot3.model.Transfer">
    update transfer
    set fromBelongTo = #{frombelongto,jdbcType=VARCHAR},
      toBelongTo = #{tobelongto,jdbcType=VARCHAR},
      userId = #{userid,jdbcType=INTEGER},
      `name` = #{name,jdbcType=VARCHAR},
      initiator = #{initiator,jdbcType=VARCHAR},
      recipient = #{recipient,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      updateTime = #{updatetime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>